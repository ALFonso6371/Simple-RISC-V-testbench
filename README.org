* Simple-RISC-V-testbench
A public testbench for RISC-V design (MR329). The directory test/
includes all the test cases in assembly. The directory emulator/
includes the source code of an emulator written in C++. The directory
assembler/ includes the source code of assembler.
** How to use?
This is an automatic testbench for the course design of MR329
(Computer Architecture). It use the GitHub Action as the test
environment and compare your HDL source files' simulation result with
an emulator written in C.

To use this testbench:
   1. Fork this repository.
   2. Clone the forked repository to your host machine and modify the
      files single/riscv_soc_tb.v and pipeline/riscv_soc_tb.v
      #+BEGIN_SRC verilog
         for (i = 0; i <= 1023; i = i+1) begin
            $fwrite(handle, "%h\n", riscv_soc_tb.data_mem0.data[i]); // change the riscv_soc_tb.data_mem0.data[i] to the instance of your data memory
         end
      #+END_SRC

      #+BEGIN_SRC verilog
      for (i = 1; i <= 31; i = i+1) begin
         $fwrite(handle, "%h\n", riscv_soc_tb.riscv0.RF.register_file[i]); // change the riscv_soc_tb.riscv0.RF.register_file[i] to the instance of your register file
      end
      #+END_SRC
   3. Move your source file to single/ and pipeline/
   4. Properly place "`include" in each file to make a full hierarchy
      relation. e.g.
   #+DOWNLOADED: screenshot @ 2020-12-18 22:31:32
   [[file:Simple-RISC-V-testbench/2020-12-18_22-31-32_screenshot.png]]
   5. Commit, push and wait for the result.

** Something more
   If you can pass all the test cases, your HDL sources is *very
   likely* to be correct. If you find any problem with the testbench
   or have some good(vicious) test case, please do not hesitate to
   contact me, raise an issue or make a pull request directly.

   This repository comes with the GPLv3 license. However, since I am
   not the author of the assembler, licensing it with GPLv3 may not be
   appropriate. On the contrary, The rest part of this repository
   is licensed with GPLv3.
